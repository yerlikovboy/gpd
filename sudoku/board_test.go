package sudoku

import (
	"testing"
)

var rowtests = []struct {
	tc       uint8
	expected []uint8
}{
	{0, []uint8{0, 1, 2, 3, 4, 5, 6, 7, 8}},
	{1, []uint8{9, 10, 11, 12, 13, 14, 15, 16, 17}},
	{2, []uint8{18, 19, 20, 21, 22, 23, 24, 25, 26}},
	{3, []uint8{27, 28, 29, 30, 31, 32, 33, 34, 35}},
	{4, []uint8{36, 37, 38, 39, 40, 41, 42, 43, 44}},

	{5, []uint8{45, 46, 47, 48, 49, 50, 51, 52, 53}},
	{6, []uint8{54, 55, 56, 57, 58, 59, 60, 61, 62}},
	{7, []uint8{63, 64, 65, 66, 67, 68, 69, 70, 71}},
	{8, []uint8{72, 73, 74, 75, 76, 77, 78, 79, 80}},
}

var coltests = []struct {
	tc       uint8
	expected []uint8
}{
	{0, []uint8{0, 9, 18, 27, 36, 45, 54, 63, 72}},
	{1, []uint8{1, 10, 19, 28, 37, 46, 55, 64, 73}},
	{2, []uint8{2, 11, 20, 29, 38, 47, 56, 65, 74}},
	{3, []uint8{3, 12, 21, 30, 39, 48, 57, 66, 75}},
	{4, []uint8{4, 13, 22, 31, 40, 49, 58, 67, 76}},

	{5, []uint8{5, 14, 23, 32, 41, 50, 59, 68, 77}},
	{6, []uint8{6, 15, 24, 33, 42, 51, 60, 69, 78}},
	{7, []uint8{7, 16, 25, 34, 43, 52, 61, 70, 79}},
	{8, []uint8{8, 17, 26, 35, 44, 53, 62, 71, 80}},
}

func TestGetRow(t *testing.T) {
	for _, v := range rowtests {
		actual := getRow(v.tc)

		found := false
		for _, ev := range v.expected {
			for _, v := range actual {
				if ev == v {
					found = true
					break
				}
			}
			if !found {
				t.Errorf("value not found: %v, actual: %v", ev, actual)

			}
		}
	}
}

func TestGetColumn(t *testing.T) {
	for _, v := range coltests {
		actual := getColumn(v.tc)

		found := false
		for _, ev := range v.expected {
			for _, v := range actual {
				if ev == v {
					found = true
					break
				}
			}
			if !found {
				t.Errorf("value not found: %v, actual: %v", ev, actual)

			}
		}
	}
}

func TestNumClues(t *testing.T) {

	tests := []struct {
		tc       Grid
		expected uint8
	}{
		{[81]uint8{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0},
		{[81]uint8{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 1},
		{[81]uint8{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 2},
		{[81]uint8{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 81},
	}

	for _, v := range tests {
		b := NewBoard(v.tc)
		actual := b.NumClues()
		if actual != v.expected {
			t.Errorf("NumClues returned incorrect value. Expected: %v, Actual: %v", v.expected, actual)
		}
	}
}

func TestIsSolved(t *testing.T) {
	tests := []struct {
		tc       Grid
		expected bool
	}{
		{[81]uint8{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false},
		{[81]uint8{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false},
		{[81]uint8{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, false},
		{[81]uint8{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, true},
		{[81]uint8{0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, false},
		{[81]uint8{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0}, false},
	}
	for _, v := range tests {
		b := NewBoard(v.tc)
		actual := b.IsSolved()
		if actual != v.expected {
			t.Errorf("IsSolved returned incorrect value. Expected: %v, Actual: %v", v.expected, actual)
		}
	}

}
